#!/usr/bin/ruby -w

def help()
	puts "help!"
end

def getContents(txt, name)
	ts = txt.index("<" + name + ">")
	te = txt.index("</" + name + ">")
	st = ts+name.length+2
	ln = te-st
	return txt[st, ln]
end

class Lang

	def initialize(src, dest, indexFuncs, varPrefix, varSufix)
		@src = src
		@body = ""
		@head = getContents(src, "head")
		@foot = getContents(src, "foot")
		@dest = getContents(src, "file")
		@name = getContents(src, "name")
		@comp = getContents(src, "comp")
		@run = getContents(src, "run")
		@varPrefix = varPrefix
		@varSufix = varSufix
		@indent = ""

		@compCmd = "cd " + dest + ";"

		for line in @comp.split("\n")
			if line.strip().length > 0
				@compCmd += line.gsub("\r", "")
				@compCmd += ";"
			end
		end

		@runCmd = "cd " + dest + ";"

		for line in @run.split("\n")
			if line.strip().length > 0
				@runCmd += line.gsub("\r", "")
				@runCmd += ";"
			end
		end

		@funcs = Hash.new()

		funcsDef = getContents(src, "funcs")

		for f in indexFuncs
			name = f.split(" ")[0]

			@funcs.store(name, getContents(funcsDef, name))
		end
	end

	def func(name, varDict)
		result = @funcs[name]

		for var in varDict.keys()
			result = result.gsub("$" + var, varDict[var])
		end

		@body += (@indent + result + "\n")
	end

	def incrementIndent()
		@indent += "\t"
	end
	
	def decrementIndent()
		@indent.slice!(0)
	end

	def write(dest)
		result = @head + @body + @foot
		file = File.open(dest + "/" + @dest, "w")
		file.write(result)
		file.close()
	end

	def comp()
		puts("Compiling " + @name + "...")
		system(@compCmd)
	end
	
	def run()
		puts("Running " + @name + "...")
		system(@runCmd)
	end

	def name()
		return @name
	end

end

if(ARGV.length < 2)
	help()
	exit
end

settingsFile = File.new(ARGV[0], "r")
settings = settingsFile.read()
settingsFile.close()

options = ARGV[1]
gen = false
comp = false
run = false

if(options.index("g") != nil)
	gen = true
end

if(options.index("c") != nil)
	comp = true
end

if(options.index("r") != nil)
	run = true
end

dest = getContents(settings, "dest")
srcs = getContents(settings, "langs")
funcsRaw = getContents(settings, "funcs")
fnOpen = getContents(settings, "fnOpen")
fnClose = getContents(settings, "fnClose")
seperator = getContents(settings, "seperator")
varPrefix = getContents(settings, "varPrefix")
varSufix = getContents(settings, "varSufix")

idxFuncs = Array.new()

for f in funcsRaw.split("\n")
	if f != ""
		idxFuncs.push(f)
	end
end

langs = Array.new()

for l in srcs.split("\n")
	if not l == ""
		file = File.new(l, "r")
		rawText = file.read()
		file.close()
		langs.push(Lang.new(rawText, dest, idxFuncs, varPrefix, varSufix))
	end
end

if(gen == true)
	if(ARGV.length < 3)
		help()
		exit
	end

	idxFuncsDictTemplate = Hash.new()

	for func in idxFuncs
		idxFuncsDictTemplate.store(func.split(" ")[0] ,func.split(" "))
	end

	codeFile = File.new(ARGV[2], "r")
	code = codeFile.read()
	codeFile.close()

	for line in code.split("\n")
		if line != ""
			if line == ">"
				for l in langs
					l.incrementIndent()
				end
			elsif line == "<"
				for l in langs
					l.decrementIndent()
				end
			else
				parts = line.split(fnOpen)
				name = parts[0]

				argStart = line.index(fnOpen)+1
				argEnd = line.index(fnClose)

				fnArgs = line[argStart, argEnd-argStart]
				pArgs = fnArgs.split(seperator)

				varDict = Hash.new()

				i = 0
				while i < pArgs.length do
					varDict.store(idxFuncsDictTemplate[name.gsub(" ", "")][i+1], pArgs[i])
					i = i + 1
				end

				for l in langs
					l.func(name.gsub(" ", ""), varDict)
				end
			end
		end
	end

	for l in langs
		l.write(dest)
	end
end

if(comp == true)
	times = Array.new()

	for l in langs
		startTime = Time.now()
		l.comp()
		endTime = Time.now()
		times.push(l.name() + ": " + ((endTime - startTime)*1000).to_s())
	end

	puts("\n=========================TIMES=========================\n")
	puts("time is measured in micro seconds")

	for t in times
		puts(t)
	end

	puts("\n")
end

if(run == true)
	times = Array.new()

	for l in langs
		startTime = Time.now()
		l.run()
		endTime = Time.now()
		times.push(l.name() + ": " + ((endTime - startTime)*1000).to_s())
	end

	puts("\n=========================TIMES=========================\n")
	puts("time is measured in micro seconds")

	for t in times
		puts(t)
	end

	puts("\n")
end
